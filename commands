Flow 
Model - admin
Model - view -urls
Model - serializer - view - urls for rest 

ðŸ‘Œ https://realpython.com/pipenv-guide/#pipenv-introduction - Pipenv is a packaging tool for Python that solves some common problems
associated with the typical workflow using pip , virtualenv, and the good old requirements. txt. - pipenv shell
ðŸ‘Œ pipenv for all installations - pipenv install django and 
ðŸ‘Œ django-admin startproject nd python manage.py startapp
ðŸ‘Œ dealing with slugs - https://kodnito.com/posts/slugify-urls-django/

USER WORKFLOW 
- pass slug,uuid,or pk to urls.py
- urls pass details to view 
- view get the datils from model 
- return the detail to the template

CSS RUNDOWN
 - From Setting check base_dir eg print(BASE_DIR)
 - add this piece of code to the settings, prefereable under
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
- on your base file add ðŸ‘‡ to the top 
{% load static %}
- create your static/css/<name> folder
- add <link rel="stylesheet" type="text/css" href="{% static 'css/<name>.css' %}"> to the head of your base html page.

Commiting to heroku
python -m pip freeze > requirements.txt
python -m pip install -r requirements.txt
git init
git status
git add .
git commit -m "Initial commit"
heroku login
heroku create <project-name>
tail -n3 .git/config
heroku git:remote --app <project-name>
/* create a Procfile file */ 
paste in Procfile
python manage.py collectstatic --noinput;
web: gunicorn --pythonpath app app.wsgi;
web: gunicorn backend.wsgi;
web: gunicorn backend.wsgi:application --log-file - --log-level debug

git add Procfile
git commit -m "Specify the command to run your project"
heroku local
python -m pip install django-heroku
python -m pip freeze > requirements.txt


Another section âœ”
# portfolio/settings.py

# ...

import django_heroku
django_heroku.settings(locals())

-git commit -am "Automatic configuration with django-heroku"

Another Section âœ”
python manage.py shell
>>> from django.core.management.utils import get_random_secret_key
>>> print(get_random_secret_key())

'SECRET_KEY=6aj9il2xu2vqwvnitsg@!+4-8t3%zwr@$agm7x%o%yb2t9ivt%' > .env

heroku config:set SECRET_KEY='6aj9il2xu2vqwvnitsg@!+4-8t3%zwr@$agm7x%o%yb2t9ivt%'

heroku config
// To perform some form of check
$ heroku config:get SECRET_KEY
6aj9il2xu2vqwvnitsg@!+4-8t3%zwr@$agm7x%o%yb2t9ivt%

heroku releases
git status
git add .
git commit -m "Remove a hardcoded Django secret key"

git push heroku master
git push heroku main

heroku run python manage.py migrate or heroku run python3 manage.py migrate
$ git commit -am "Automate remote migrations"
$ git push heroku master


heroku run python manage.py createsuperuser
